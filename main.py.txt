import torch
import cv2
import qrcode
import os
import sys
import numpy as np
from datetime import datetime
import json
from PIL import Image, ImageTk
import tkinter as tk
from tkinter import ttk, messagebox
import threading
import time
import logging
from flask import Flask, render_template_string, request, jsonify
from twilio.rest import Client
from twilio.twiml.messaging_response import MessagingResponse
import requests
import webbrowser

# Suppress warnings
os.environ['OPENCV_LOG_LEVEL'] = 'ERROR'
cv2.setLogLevel(0)
logging.getLogger().setLevel(logging.ERROR)

# Ensure YOLOv5 modules
sys.path.append(os.path.join(os.getcwd(), 'yolov5'))

try:
    from models.common import DetectMultiBackend
    from utils.general import non_max_suppression, scale_boxes
    from utils.torch_utils import select_device
    from utils.augmentations import letterbox
except ImportError as e:
    print(f"Error importing YOLOv5: {e}")
    sys.exit(1)


class AutomaticFruitDetector:
    def __init__(self):
        self.model_path = "C:\\Users\\HP\\PycharmProjects\\Python electro fruit\\yolov5\\runs\\train\\exp\\weights\\best.pt"
        self.device = select_device('')
        self.model = None
        self.cap = None
        self.running = False
        self.current_frame = None
        self.auto_detection = False
        self.detection_interval = 2.0
        self.last_detection_time = 0
        self.confidence_threshold = 0.5
        self.min_fruit_confidence = 0.4

        # Valid fruit classes
        self.valid_fruit_classes = ['apple', 'banana', 'orange', 'strawberry',
                                    'rotten apple', 'rotten banana', 'rotten orange', 'rotten strawberry']
        self.class_names = ['0', 'apple', 'banana', 'orange', 'rotten apple',
                            'rotten banana', 'rotten orange', 'rotten strawberry', 'strawberry']

        # Fruit database
        self.fruit_database = {
            'apple': {'name': 'Fresh Apple', 'quality': 'Premium Fresh', 'nutrition': 'Rich in fiber, vitamin C'},
            'banana': {'name': 'Fresh Banana', 'quality': 'Premium Ripe', 'nutrition': 'High potassium, vitamin B6'},
            'orange': {'name': 'Fresh Orange', 'quality': 'Premium Juicy', 'nutrition': 'Excellent vitamin C, folate'},
            'strawberry': {'name': 'Fresh Strawberry', 'quality': 'Premium Sweet',
                           'nutrition': 'High vitamin C, antioxidants'},
            'rotten apple': {'name': 'Spoiled Apple', 'quality': '‚ö† SPOILED - UNSAFE', 'warning': 'DO NOT CONSUME'},
            'rotten banana': {'name': 'Spoiled Banana', 'quality': '‚ö† SPOILED - UNSAFE', 'warning': 'DO NOT CONSUME'},
            'rotten orange': {'name': 'Spoiled Orange', 'quality': '‚ö† SPOILED - UNSAFE', 'warning': 'DO NOT CONSUME'},
            'rotten strawberry': {'name': 'Spoiled Strawberry', 'quality': '‚ö† SPOILED - UNSAFE',
                                  'warning': 'DO NOT CONSUME'}
        }

        # Config
        self.twilio_account_sid = 'AC4d8d6a6406a812eef561f8437f1dacfe'
        self.twilio_auth_token = '51f499e1f498a93d01b815b90df03935'
        self.twilio_phone_number = '+12065351635'
        self.alert_phone_number = '9496290802'
        self.nodemcu_ip = '192.168.1.20'
        self.nodemcu_port = 5

        # Initialize Twilio
        try:
            self.twilio_client = Client(self.twilio_account_sid, self.twilio_auth_token)
        except Exception as e:
            print(f"Twilio init error: {e}")
            self.twilio_client = None

        # Flask setup
        self.flask_app = Flask(__name__)
        self.setup_flask_routes()
        self.server_thread = None

        self.setup_gui()
        self.load_model()

    def setup_flask_routes(self):
        @self.flask_app.route('/')
        def index():
            return render_template_string('''
            <!DOCTYPE html>
            <html>
            <head><title>üçé Fruit Detection Control</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background: #f0f0f0; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }
                .button { padding: 15px 30px; margin: 10px; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; }
                .relay-on { background: #ff4444; color: white; }
                .relay-off { background: #44ff44; color: white; }
                .status { padding: 10px; margin: 10px 0; border-radius: 5px; font-weight: bold; }
                .status.online { background: #d4edda; color: #155724; }
                .status.offline { background: #f8d7da; color: #721c24; }
            </style>
            </head>
            <body>
                <div class="container">
                    <h1>üçé Fruit Detection Control</h1>
                    <div id="status" class="status offline">üî¥ Checking...</div>
                    <button class="button relay-on" onclick="controlRelay('on')">üö® Relay ON</button>
                    <button class="button relay-off" onclick="controlRelay('off')">‚úÖ Relay OFF</button>
                </div>
                <script>
                    function controlRelay(action) {
                        fetch('/relay/' + action, {method: 'POST'})
                            .then(response => response.json())
                            .then(data => console.log(data));
                    }
                </script>
            </body>
            </html>
            ''')

        @self.flask_app.route('/relay/<action>', methods=['POST'])
        def control_relay(action):
            try:
                if action == 'on':
                    result = self.trigger_relay(True)
                    return jsonify({'success': True, 'message': f'Relay ON: {result}'})
                elif action == 'off':
                    result = self.trigger_relay(False)
                    return jsonify({'success': True, 'message': f'Relay OFF: {result}'})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})

    def start_flask_server(self):
        def run_server():
            self.flask_app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False)

        self.server_thread = threading.Thread(target=run_server, daemon=True)
        self.server_thread.start()

    def trigger_relay(self, state):
        try:
            action = 'on' if state else 'off'
            url = f'http://{self.nodemcu_ip}:{self.nodemcu_port}/relay/{action}'
            response = requests.post(url, timeout=10)
            return f"Relay {action.upper()} - {'Success' if response.status_code == 200 else 'Failed'}"
        except Exception as e:
            return f"Error: {str(e)}"

    def send_twilio_alert(self, fruit_info):
        if not self.twilio_client:
            return False
        try:
            details = self.fruit_database.get(fruit_info['name'], {})
            alert_message = f"üö® ROTTEN FRUIT ALERT!\nFruit: {details.get('name', fruit_info['name'])}\nTime: {fruit_info['timestamp']}\n‚ö† DO NOT CONSUME!"

            message = self.twilio_client.messages.create(
                body=alert_message,
                from_=self.twilio_phone_number,
                to=self.alert_phone_number
            )

            self.trigger_relay(True)
            time.sleep(5)
            self.trigger_relay(False)

            print(f"‚úÖ Alert sent: {message.sid}")
            return True
        except Exception as e:
            print(f"‚ùå Alert failed: {e}")
            return False

    def setup_gui(self):
        self.root = tk.Tk()
        self.root.title("ü§ñ Automatic Fruit Detection System")
        self.root.geometry("1200x800")

        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # Control panel
        control_frame = ttk.LabelFrame(main_frame, text="üéõ Controls", padding="10")
        control_frame.pack(fill=tk.X, pady=(0, 10))

        self.start_btn = ttk.Button(control_frame, text="üìπ Start Camera", command=self.start_detection)
        self.start_btn.pack(side=tk.LEFT, padx=5)

        self.stop_btn = ttk.Button(control_frame, text="‚èπ Stop", command=self.stop_detection, state="disabled")
        self.stop_btn.pack(side=tk.LEFT, padx=5)

        self.auto_detect_btn = ttk.Button(control_frame, text="ü§ñ Auto-Detection", command=self.toggle_auto_detection,
                                          state="disabled")
        self.auto_detect_btn.pack(side=tk.LEFT, padx=5)

        self.manual_btn = ttk.Button(control_frame, text="üîç Manual Detect", command=self.manual_detect,
                                     state="disabled")
        self.manual_btn.pack(side=tk.LEFT, padx=5)

        self.refresh_btn = ttk.Button(control_frame, text="üîÑ Refresh", command=self.refresh_camera, state="disabled")
        self.refresh_btn.pack(side=tk.LEFT, padx=5)

        self.web_btn = ttk.Button(control_frame, text="üåê Web Control", command=self.open_web_control)
        self.web_btn.pack(side=tk.LEFT, padx=5)

        self.status_label = ttk.Label(control_frame, text="üîÑ Ready", foreground="blue")
        self.status_label.pack(side=tk.RIGHT)

        # Main content
        content_frame = ttk.Frame(main_frame)
        content_frame.pack(fill=tk.BOTH, expand=True)

        # Video feed
        video_frame = ttk.LabelFrame(content_frame, text="üìπ Camera Feed", padding="10")
        video_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))

        self.video_label = ttk.Label(video_frame, text="üì∑ Camera will start here...")
        self.video_label.pack(expand=True)

        # Results panel
        results_frame = ttk.LabelFrame(content_frame, text="üìä Detection Results", padding="10")
        results_frame.pack(side=tk.RIGHT, fill=tk.BOTH, padx=(5, 0))

        self.results_text = tk.Text(results_frame, width=40, height=15, wrap=tk.WORD)
        self.results_text.pack(fill=tk.BOTH, expand=True)

        # QR Code
        qr_frame = ttk.LabelFrame(results_frame, text="üì± QR Code", padding="5")
        qr_frame.pack(pady=10, fill=tk.X)

        self.qr_label = ttk.Label(qr_frame, text="üì± QR Code will appear here")
        self.qr_label.pack(pady=5)

        self.show_initial_info()

    def open_web_control(self):
        webbrowser.open('http://localhost:5000')

    def show_initial_info(self):
        self.results_text.delete(1.0, tk.END)
        info_text = """ü§ñ AUTOMATIC FRUIT DETECTION
==================================

üìπ CAMERA DETECTION ORDER:
1. External USB cameras (priority)
2. Built-in camera (fallback)

üçé SUPPORTED FRUITS:
‚Ä¢ Apple, Banana, Orange, Strawberry
‚Ä¢ Fresh & Rotten detection

üö® ROTTEN FRUIT ALERTS:
‚Ä¢ Auto relay trigger (5s)
‚Ä¢ SMS notifications
‚Ä¢ Web control panel

üåê WEB CONTROL:
‚Ä¢ http://localhost:5000

üöÄ Click "Start Camera" to begin!
"""
        self.results_text.insert(1.0, info_text)

    def load_model(self):
        try:
            if not os.path.exists(self.model_path):
                messagebox.showerror("Error", f"Model not found: {self.model_path}")
                return False

            self.model = DetectMultiBackend(self.model_path, device=self.device)
            self.stride = getattr(self.model, 'stride', 32)
            if isinstance(self.stride, torch.Tensor):
                self.stride = int(self.stride.max())
            self.names = getattr(self.model, 'names', {i: name for i, name in enumerate(self.class_names)})
            self.status_label.config(text="‚úÖ Model loaded", foreground="green")
            return True
        except Exception as e:
            messagebox.showerror("Model Error", f"Failed to load model: {str(e)}")
            return False

    def find_working_camera(self):
        """Enhanced camera detection with proper external camera priority"""
        print("üîç Searching for cameras...")

        # Test external cameras first (indices 1-10)
        for camera_idx in range(1, 11):
            print(f"Testing camera index {camera_idx}...")

            # Try different backends for better compatibility
            backends = [cv2.CAP_DSHOW, cv2.CAP_MSMF, cv2.CAP_V4L2, cv2.CAP_ANY]

            for backend in backends:
                try:
                    print(f"  Trying backend: {backend}")
                    cap = cv2.VideoCapture(camera_idx, backend)

                    # Give camera time to initialize
                    time.sleep(0.5)

                    # Set properties before checking if opened
                    cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
                    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
                    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
                    cap.set(cv2.CAP_PROP_FPS, 30)

                    # Give more time for settings to apply
                    time.sleep(0.3)

                    if cap.isOpened():
                        print(f"  Camera {camera_idx} opened successfully")

                        # Test if camera actually works with multiple attempts
                        working = False
                        for attempt in range(5):  # Increased attempts
                            print(f"    Attempt {attempt + 1}/5...")
                            ret, frame = cap.read()
                            if ret and frame is not None and frame.size > 0:
                                # Verify frame has proper dimensions
                                if len(frame.shape) == 3 and frame.shape[0] > 0 and frame.shape[1] > 0:
                                    print(f"‚úÖ Found working external camera at index {camera_idx}")
                                    return cap, camera_idx
                            time.sleep(0.1)  # Small delay between attempts

                        print(f"  Camera {camera_idx} opened but no valid frames")
                        cap.release()
                    else:
                        print(f"  Camera {camera_idx} failed to open")
                        cap.release()

                except Exception as e:
                    print(f"  Error with camera {camera_idx}, backend {backend}: {e}")
                    try:
                        cap.release()
                    except:
                        pass
                    continue

        # If no external camera found, try built-in camera (index 0)
        print("üîç No external camera found, trying built-in camera...")
        backends_builtin = [cv2.CAP_DSHOW, cv2.CAP_MSMF, cv2.CAP_ANY]

        for backend in backends_builtin:
            try:
                print(f"  Trying built-in camera with backend: {backend}")
                cap = cv2.VideoCapture(0, backend)
                time.sleep(0.5)  # Give time to initialize

                cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
                cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
                cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
                time.sleep(0.3)

                if cap.isOpened():
                    # Test built-in camera
                    for attempt in range(3):
                        ret, frame = cap.read()
                        if ret and frame is not None and frame.size > 0:
                            print("‚úÖ Using built-in camera")
                            return cap, 0
                        time.sleep(0.1)
                    cap.release()
                else:
                    cap.release()
            except Exception as e:
                print(f"  Built-in camera error with backend {backend}: {e}")
                try:
                    cap.release()
                except:
                    pass
                continue

        print("‚ùå No working camera found")
        return None, -1

    def start_detection(self):
        # Release any existing camera first
        if self.cap:
            self.cap.release()
            self.cap = None
            time.sleep(1)  # Give time for camera to be released

        self.cap, camera_idx = self.find_working_camera()
        if not self.cap:
            messagebox.showerror("Camera Error",
                                 "No camera detected!\n\nTroubleshooting:\n"
                                 "1. Ensure external webcam is properly connected\n"
                                 "2. Check if webcam is being used by another application\n"
                                 "3. Try unplugging and reconnecting the webcam\n"
                                 "4. Restart the application")
            return

        self.running = True
        self.start_btn.config(state="disabled")
        self.stop_btn.config(state="normal")
        self.auto_detect_btn.config(state="normal")
        self.manual_btn.config(state="normal")
        self.refresh_btn.config(state="normal")

        camera_type = "External USB Camera" if camera_idx > 0 else "Built-in Camera"
        self.status_label.config(text=f"üìπ {camera_type} (Index: {camera_idx})", foreground="green")

        # Add camera info to results
        self.results_text.delete(1.0, tk.END)
        camera_info = f"""üìπ CAMERA ACTIVE
    ==========================

    üîå CAMERA TYPE: {camera_type}
    üìç Camera Index: {camera_idx}
    üéØ Resolution: 640x480
    üìä FPS: 30

    {'üéØ EXTERNAL WEBCAM DETECTED!' if camera_idx > 0 else 'üíª Using built-in camera'}

    üöÄ Ready for detection!
    """
        self.results_text.insert(1.0, camera_info)

        self.video_thread = threading.Thread(target=self.video_loop, daemon=True)
        self.video_thread.start()

        self.start_flask_server()

    def refresh_camera(self):
        """Refresh camera connection - useful when external camera is connected after startup"""
        print("üîÑ Refreshing camera connection...")
        if self.running:
            self.stop_detection()
            time.sleep(2)  # Give more time for cleanup
        self.start_detection()

    def stop_detection(self):
        self.running = False
        self.auto_detection = False
        if self.cap:
            self.cap.release()
            self.cap = None

        self.start_btn.config(state="normal")
        self.stop_btn.config(state="disabled")
        self.auto_detect_btn.config(state="disabled")
        self.manual_btn.config(state="disabled")
        self.refresh_btn.config(state="disabled")
        self.status_label.config(text="‚èπ Stopped", foreground="red")

    def toggle_auto_detection(self):
        self.auto_detection = not self.auto_detection
        if self.auto_detection:
            self.auto_detect_btn.config(text="üîÑ Auto-ON")
            self.status_label.config(text="ü§ñ Auto-detection active", foreground="green")
        else:
            self.auto_detect_btn.config(text="‚è∏ Auto-OFF")
            self.status_label.config(text="‚è∏ Manual mode", foreground="orange")

    def video_loop(self):
        while self.running:
            try:
                ret, frame = self.cap.read()
                if ret:
                    self.current_frame = frame.copy()
                    if self.auto_detection:
                        current_time = time.time()
                        if current_time - self.last_detection_time >= self.detection_interval:
                            self.last_detection_time = current_time
                            self.automatic_detect()
                    self.display_frame(frame)
                time.sleep(0.033)
            except Exception as e:
                print(f"Video loop error: {e}")
                break
        self.root.after(0, self.stop_detection)

    def automatic_detect(self):
        if self.current_frame is not None and self.model:
            try:
                detected_fruits = self.detect_fruits(self.current_frame)
                valid_fruits = [f for f in detected_fruits if
                                f['name'] in self.valid_fruit_classes and f['confidence'] >= self.min_fruit_confidence]

                if valid_fruits:
                    best_fruit = max(valid_fruits, key=lambda x: x['confidence'])
                    self.display_results(best_fruit)
                    self.generate_qr_code(best_fruit)

                    if best_fruit['is_rotten']:
                        print(f"üö® ROTTEN FRUIT: {best_fruit['name']}")
                        self.send_twilio_alert(best_fruit)
                else:
                    self.display_no_fruit_found()
            except Exception as e:
                print(f"Detection error: {e}")

    def detect_fruits(self, frame):
        try:
            img_tensor = self.preprocess_image(frame)
            if img_tensor is None:
                return []

            with torch.no_grad():
                pred = self.model(img_tensor)

            pred = non_max_suppression(pred, conf_thres=0.25, iou_thres=0.45)
            detected_objects = []

            for det in pred:
                if det is not None and len(det):
                    for *xyxy, conf, cls in det:
                        cls_idx = int(cls)
                        if cls_idx in self.names:
                            object_name = self.names[cls_idx]
                            if object_name != '0':
                                detected_objects.append({
                                    'name': object_name,
                                    'confidence': float(conf),
                                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                                    'is_rotten': 'rotten' in object_name.lower()
                                })
            return detected_objects
        except Exception as e:
            print(f"Detection error: {e}")
            return []

    def preprocess_image(self, img):
        try:
            img_resized = letterbox(img, new_shape=(640, 640), stride=self.stride, auto=True)[0]
            img_rgb = cv2.cvtColor(img_resized, cv2.COLOR_BGR2RGB)
            img_tensor = torch.from_numpy(img_rgb).to(self.device).float() / 255.0
            if len(img_tensor.shape) == 3:
                img_tensor = img_tensor.unsqueeze(0)
            return img_tensor.permute(0, 3, 1, 2)
        except Exception as e:
            return None

    def display_frame(self, frame):
        try:
            display_frame = frame.copy()
            status_text = "AUTO-DETECTION ON" if self.auto_detection else "MANUAL MODE"
            color = (0, 255, 0) if self.auto_detection else (0, 0, 255)
            cv2.putText(display_frame, status_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, color, 2)

            display_frame = cv2.resize(display_frame, (480, 360))
            rgb_frame = cv2.cvtColor(display_frame, cv2.COLOR_BGR2RGB)
            pil_image = Image.fromarray(rgb_frame)
            photo = ImageTk.PhotoImage(image=pil_image)

            self.video_label.config(image=photo, text="")
            self.video_label.image = photo
        except Exception as e:
            print(f"Display error: {e}")

    def display_results(self, fruit_info):
        try:
            self.results_text.delete(1.0, tk.END)
            details = self.fruit_database.get(fruit_info['name'], {})
            is_rotten = fruit_info['is_rotten']
            icon = "üçé" if not is_rotten else "üö®"

            result_text = f"""{icon} FRUIT DETECTED!
==============================

üîç IDENTIFIED:
Name: {details.get('name', fruit_info['name'])}
Quality: {details.get('quality', 'Unknown')}
Confidence: {fruit_info['confidence']:.1%}
Time: {fruit_info['timestamp']}

üìä NUTRITION INFO:
{details.get('nutrition', 'No nutrition info available')}

{'‚ö† ' + details.get('warning', 'UNSAFE TO CONSUME') if is_rotten else '‚úÖ Safe to consume'}

ü§ñ AUTOMATIC ACTIONS:
{'üö® Relay triggered via SMS' if is_rotten else '‚úÖ No action needed'}
{'üì± SMS alert sent' if is_rotten else 'üì± No alert needed'}
"""

            self.results_text.insert(1.0, result_text)
            print(f"‚úÖ Detection: {fruit_info['name']} ({fruit_info['confidence']:.1%})")
        except Exception as e:
            print(f"Display results error: {e}")

    def display_no_fruit_found(self):
        self.results_text.delete(1.0, tk.END)
        no_fruit_text = """‚ùå NO FRUIT DETECTED
==========================

üîç SCANNING:
‚Ä¢ Looking for fruits...
‚Ä¢ Auto-detection active
‚Ä¢ Confidence threshold: 40%

üçé SUPPORTED FRUITS:
‚Ä¢ Apple (Fresh/Rotten)
‚Ä¢ Banana (Fresh/Rotten)  
‚Ä¢ Orange (Fresh/Rotten)
‚Ä¢ Strawberry (Fresh/Rotten)

üí° TIPS:
‚Ä¢ Ensure good lighting
‚Ä¢ Hold fruit steady
‚Ä¢ Distance: 30-50cm
‚Ä¢ Clear background helps
"""
        self.results_text.insert(1.0, no_fruit_text)

    def generate_qr_code(self, fruit_info):
        try:
            details = self.fruit_database.get(fruit_info['name'], {})
            qr_data = {
                'fruit_name': details.get('name', fruit_info['name']),
                'quality': details.get('quality', 'Unknown'),
                'confidence': f"{fruit_info['confidence']:.1%}",
                'detection_time': fruit_info['timestamp'],
                'is_rotten': fruit_info['is_rotten'],
                'system': 'Automatic Fruit Detection System'
            }

            qr = qrcode.QRCode(version=1, box_size=4, border=2)
            qr.add_data(json.dumps(qr_data, indent=2))
            qr.make(fit=True)

            qr_img = qr.make_image(fill_color="black", back_color="white")
            qr_img = qr_img.resize((200, 200))
            qr_photo = ImageTk.PhotoImage(qr_img)

            self.qr_label.config(image=qr_photo, text="")
            self.qr_label.image = qr_photo
        except Exception as e:
            print(f"QR generation error: {e}")

    def manual_detect(self):
        if self.current_frame is not None and self.model:
            try:
                detected_fruits = self.detect_fruits(self.current_frame)
                valid_fruits = [f for f in detected_fruits if
                                f['name'] in self.valid_fruit_classes and f['confidence'] >= self.min_fruit_confidence]

                if valid_fruits:
                    best_fruit = max(valid_fruits, key=lambda x: x['confidence'])
                    self.display_results(best_fruit)
                    self.generate_qr_code(best_fruit)

                    if best_fruit['is_rotten']:
                        self.send_twilio_alert(best_fruit)
                else:
                    self.display_no_fruit_found()
            except Exception as e:
                print(f"Manual detection error: {e}")

    def on_closing(self):
        self.running = False
        self.auto_detection = False
        if self.cap:
            self.cap.release()
        cv2.destroyAllWindows()
        self.root.quit()

    def run(self):
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        print("üöÄ Automatic Fruit Detection System Starting...")
        print("üìπ External USB cameras will be prioritized")
        print("üåê Web control: http://localhost:5000")
        self.start_flask_server()
        self.root.mainloop()


def main():
    
    try:
        app = AutomaticFruitDetector()
        app.run()
    except KeyboardInterrupt:
        print("\nüëã Application interrupted")
    except Exception as e:
        print(f"‚ùå Application error: {e}")
        messagebox.showerror("Error", f"Critical error: {e}")


if __name__ == "__main__":
    main()